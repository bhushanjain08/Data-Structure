                        ** GRAPHS **

https://musicmap.info/

Q) WHAT ARE GRAPHS?
A graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected graph or a set of ordered pairs for a directed graph.

graphs = Nodes + Connections

# USES FOR GRAPHS
- Social Networks
- Location / Mapping
- Routing Algorithms
- Visual Hierarchy
- File System Optimizations
- EVERYWHERE!

# Recommendations
- "People also watched"
- "You might also like..."
- "People you might know"
- "Frequently bought with"

# TYPES OF GRAPHS

# ESSENTIAL GRAPH TERMS
Vertex - a node
Edge - connection between nodes
Weighted/Unweighted - values assigned to distances between vertices
Directed/Undirected - directions assigned to distanced between vertices

# What will we use?
An Adjacency List
Most data in the real-world tends to lend itself to sparser and/or larger graphs

# OUR GRAPH CLASS
class Graph {
    constructor(){
        this.adjacencyList = {}
    }
}

# WE ARE BUILDING AN UNDIRECTED GRAPH :

# ADDING A VERTEX
- Write a method called addVertex, which accepts a name of a vertex
- It should add a key to the adjacency list with the name of the vertex and set its value to be an empty array
g.addVertex("Tokyo")
{
    "Tokyo": []
}

# ADDING AN EDGE :
- This function should accept two vertices, we can call them vertex1 and vertex2
- The function should find in the adjacency list the key of vertex1 and push vertex2 to the array
- The function should find in the adjacency list the key of vertex2 and push vertex1 to the array
- Don't worry about handling errors/invalid vertices

{
  "Tokyo": [],
  "Dallas": [],
  "Aspen": []
}
        **down arrow**

g.addEdge("Tokyo", "Dallas")
         
         **down arrow**

{
  "Tokyo": ["Dallas"],
  "Dallas": ["Tokyo"],
  "Aspen": []
}

     **down arrow**

g.addEdge("Dallas", "Aspen")

     **down arrow**

{
  "Tokyo": ["Dallas"],
  "Dallas": ["Tokyo", "Aspen"],
  "Aspen": ["Dallas"]
}
----------------------------------------------------

# REMOVING AN EDGE
- This function should accept two vertices, we'll call them vertex1 and vertex2
- The function should reassign the key of vertex1 to be an array that does not contain vertex2
- The function should reassign the key of vertex2 to be an array that does not contain vertex1
- Don't worry about handling errors/invalid vertices


{
  "Tokyo": ["Dallas"],
  "Dallas": ["Tokyo", "Aspen"],
  "Aspen": ["Dallas"]
}

    **down arrow**

g.removeEdge("Tokyo", "Dallas")

        **down arrow**

{
  "Tokyo": [],
  "Dallas": ["Aspen"],
  "Aspen": ["Dallas"]
}
-------------------------------------------------

# REMOVING A VERTEX :
- The function should accept a vertex to remove
- The function should loop as long as there are any other vertices in the adjacency list for that vertex
- Inside of the loop, call our removeEdge function with the vertex we are removing and any values in the adjacency list for that vertex
- delete the key in the adjacency list for that vertex

{
  "Tokyo": ["Dallas", "Hong Kong"],
  "Dallas": ["Tokyo", "Aspen", "Hong Kong", "Los Angeles"],
  "Aspen": ["Dallas"],
  "Hong Kong": ["Tokyo", "Dallas", "Los Angeles"],
  "Los Angeles": ["Hong Kong", "Dallas"]
}

        **down arrow**

g.removeVertex("Hong Kong")

    **down arrow**

{
  "Tokyo": ["Dallas"],
  "Dallas": ["Tokyo", "Aspen","Los Angeles"],
  "Aspen": ["Dallas"],
  "Los Angeles": ["Dallas"]
}
-------------------------------------------------