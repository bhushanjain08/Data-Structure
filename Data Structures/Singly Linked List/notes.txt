https://visualgo.net/en/list

Singly Linked Lists :

# What is a linked list?
A data structure that contains a head, tail and length property.
Linked Lists consist of nodes, and each node has a value and a pointer to another node or null.

# Useage of LL:
Need an ordered list with fast inserts/removals at the beginning and end?
Use a linked list!


# Comparisons with Arrays :
        Lists 
Do not have indexes!
Connected via nodes with a next pointer
Random access is not allowed
Contains a head, tail and length property.

        Arrays
Indexed in order!
Insertion and deletion can be expensive
Can quickly be accessed at a specific index


Big O of Singly Linked Lists
Insertion -   O(1)
Removal -   It depends.... O(1) when remove from start or O(N) when remove from last
Searching -   O(N)
Access -   O(N)

-------------------------------------
# Pushing
Adding a new node to the end of the Linked List!

Pushing pseudocode :
Let's visualize this!

1. This function should accept a value
2. Create a new node using the value passed to the function
3. If there is no head property on the list, set the head and tail to be the newly created node
4. Otherwise set the next property on the tail to be the new node and set the tail property on the list to be the newly created node
5. Increment the length by one
6. Return the linked list
----------------------------
# Popping
Removing a node from the end of the Linked List!

Popping pseudocode
Let's visualize this!

1) If there are no nodes in the list, return undefined
2) Loop through the list until you reach the tail
3) Set the next property of the 2nd to last node to be null
4) Set the tail to be the 2nd to last node
5) Decrement the length of the list by 1
6) Handle special case when only one node remaining.
7) Return the value of the node removed
--------------------

# Shifting
Removing a new node from the beginning of the Linked List!

Shifting pseudocode :
Let's visualize this!

1. If there are no nodes, return undefined
2. Store the current head property in a variable
3. Set the head property to be the current head's next property
4. Decrement the length by 1
5. Handle special case when only one node remaining.
6. Return the value of the node removed
-----------------------------------------

# Unshifting
Adding a new node to the beginning of the Linked List as a head!

Unshifting pseudocode :
Let's visualize this!

1) This function should accept a value
2) Create a new node using the value passed to the function
3) If there is no head property on the list, set the head and tail to be the newly created node
4) Otherwise set the newly created node's next property to be the current head property on the list
5) Set the head property on the list to be that newly created node
6) Increment the length of the list by 1
7) Return the linked list
--------------------------------------------

# Get (get the value of node on a partiular index)
Retrieving a node value by it's position in the Linked List!
Index Counter starts from 0.

Get pseudocode :
Let's visualize this!

1. This function should accept an index
2. If the index is less than zero or greater than or equal to the length of the list, return null
3. Loop through the list until you reach the index and return the node at that specific index
---------------------------------

# Set (set the value of node on a partiular index)
Changing the value of a node based on it's position in the Linked List

Set pseudocode :
Let's visualize this!

1. This function should accept a value and an index
2. Use your get function to find the specific node.
3. If the node is not found, return false
4. If the node is found, set the value of that node to be the value passed to the function and return true
------------------------------------

# Insert
Adding a node to the Linked List at a specific position

Insert pseudocode :
Let's visualize this!

1) If the index is less than zero or greater than the length, return false
2) If the index is the same as the length, push a new node to the end of the list
3) If the index is 0, unshift a new node to the start of the list
4) Otherwise, using the get method, access the node at the index - 1
5) Set the next property on that node to be the new node
6) Set the next property on the new node to be the previous next
7) Increment the length
8) Return true
------------------------------------------

# Remove
Removing a node from the Linked List at a specific position

Remove pseudocode :
Let's visualize this!

1) If the index is less than zero or greater than the length, return undefined
2) If the index is the same as the length-1, pop
3) If the index is 0, shift
4) Otherwise, using the get method, access the node at the index - 1
5) Set the next property on that node to be the next of the next node
6) Decrement the length
7) Return the value of the node removed
-------------------------------------------------

# REVERSE
Reversing the Linked List
in place!

# check image Reverse SLL 

Reverse pseudocode :
Let's visualize this!

1. Swap the head and tail
2. Create a variable called next
3. Create a variable called prev
4. Create a variable called node and initialize it to the head property
5. Loop through the list
6. Set next to be the next property on whatever node is
7. Set the next property on the node to be whatever prev is
8. Set prev to be the value of the node variable
9. Set the node variable to be the value of the next variable
10. Once you have finished looping, return the list
-------------------------------------------------------------

# RECAP :
1. Singly Linked Lists are an excellent alternative to arrays when insertion and deletion at the beginning are frequently required
2. Arrays contain a built in index whereas Linked Lists do not
3. The idea of a list data structure that consists of nodes is the foundation for other data structures like Stacks and Queues



