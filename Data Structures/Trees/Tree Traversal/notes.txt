TRAVERSING A TREE
Two ways:
1. Breadth-first Search
2. Depth-first Search

BFS works in horizontal way
DFS works in vertical way.

------------------------------------ 
BFS pseudocode
Steps - Iteratively

* Create a queue (this can be an array) and a variable to store the values of nodes visited
* Place the root node in the queue
* Loop as long as there is anything in the queue
    -Dequeue a node from the queue and push the value of the node into the variable that stores the nodes
    -If there is a left property on the node dequeued - add it to the queue
    -If there is a right property on the node dequeued - add it to the queue
* Return the variable that stores the values
---------------------------------------------

# DFS - PreOrder
P-L-R STARTS FROM FIRST ROW
Steps - Recursively

*Create a variable to store the values of nodes visited
*Store the root of the BST in a variable called current
*Write a helper function which accepts a node
    -Push the value of the node to the variable that stores the values
    -If the node has a left property, call the helper function with the left property on the node
    -If the node has a right property, call the helper function with the right property on the node
*Invoke the helper function with the current variable
*Return the array of values
---------------------------------------------------
# DFS - PostOrder
L-R-P STARTS FROM LAST ROW
Steps - Recursively

*Create a variable to store the values of nodes visited
*Store the root of the BST in a variable called current
*Write a helper function which accepts a node
    -If the node has a left property, call the helper function with the left property on the node
    -If the node has a right property, call the helper function with the right property on the node
    -Push the value of the node to the variable that stores the values
*Invoke the helper function with the current variable
*Return the array of values
---------------------------------------------------
# DFS - InOrder
L-P-R  STARTS FROM LAST ROW
Steps - Recursively

*Create a variable to store the values of nodes visited
*Store the root of the BST in a variable called current
*Write a helper function which accepts a node
    -If the node has a left property, call the helper function with the left property on the node
    -Push the value of the node to the variable that stores the values
    -If the node has a right property, call the helper function with the right property on the node
*Invoke the helper function with the current variable
*Return the array of values
------------------------------------

#RECAP
-Trees are non-linear data structures that contain a root and child nodes
-Binary Trees can have values of any type, but at most two children for each parent
-Binary Search Trees are a more specific version of binary trees where every node to the left of a parent is less than it's value and every node to the right is greater
-We can search through Trees using BFS and DFS